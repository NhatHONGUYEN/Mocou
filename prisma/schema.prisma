datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String? // Mot de passe haché
  score          Int             @default(0) // Score global de l'utilisateur
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  scores         Score[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId]) // Index pour optimiser les requêtes
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Index pour optimiser les requêtes
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model WordList {
  id        String   @id @default(cuid())
  category  String   @unique // Catégorie unique
  words     Word[]
  imageUrl  String? // URL de l'image associée au mot
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Word {
  id          String  @id @default(cuid())
  word        String // Le mot en langue étrangère (ex: "고양이")
  translation String // La traduction du mot (ex: "Chat")
  hint        String? // Un indice pour aider à deviner le mot (ex: "Animal domestique qui aime dormir")
  imageUrl    String? // URL de l'image associée au mot
  wordListId  String // Référence à la catégorie de mots

  wordList WordList @relation(fields: [wordListId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([wordListId]) // Index pour optimiser les requêtes
}

model Score {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  score     Int
  category  String
  createdAt DateTime @default(now())

  @@index([userId]) // Index pour optimiser les requêtes
}
